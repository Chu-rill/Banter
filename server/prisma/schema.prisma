generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  username               String          @unique
  email                  String          @unique
  password               String?
  avatar                 String?
  isOnline               Boolean         @default(false)
  lastSeen               DateTime        @default(now())
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isVerified             Boolean         @default(false)
  actionToken            String?         @unique
  actionTokenExpiry      DateTime?
  rooms                  Room[]          @relation("RoomParticipants")
  createdRooms           Room[]          @relation("RoomCreator")
  subscriptions          Subscription[]
  callSessions           CallSession[]
  transactions           Transaction[]
  messages               Message[]
  messageReads           MessageRead[] // New relation
  sentMessages           DirectMessage[] @relation("SentMessages")
  receivedMessages       DirectMessage[] @relation("ReceivedMessages")
  sentFriendRequests     Friendship[]    @relation("Requester")
  receivedFriendRequests Friendship[]    @relation("Receiver")
  notifications          Notification[]
  credits                Int             @default(0)
}

model Friendship {
  id          String       @id @default(cuid())
  requesterId String
  receiverId  String
  requester   User         @relation("Requester", fields: [requesterId], references: [id])
  receiver    User         @relation("Receiver", fields: [receiverId], references: [id])
  status      FriendStatus @default(PENDING)
  createdAt   DateTime     @default(now())

  @@unique([requesterId, receiverId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
  DECLINED
}

model Notification {
  id     String @id @default(cuid())
  userId String // who receives this notification
  user   User   @relation(fields: [userId], references: [id])

  type     NotificationType
  message  String
  metadata Json? // flexible field for extra data (e.g. roomId, friendId)

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  FRIEND_DECLINED
  FRIEND_BLOCKED
  ROOM_INVITE
  ROOM_JOINED
  MESSAGE
  SYSTEM
}

model DirectMessage {
  id         String @id @default(cuid())
  senderId   String
  receiverId String

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  content   String?
  type      MessageType @default(TEXT)
  mediaUrl  String?
  mediaType MediaType?
  createdAt DateTime    @default(now())
  isRead    Boolean     @default(false)
}

model Room {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            RoomType @default(PUBLIC)
  creatorId       String
  creator         User     @relation("RoomCreator", fields: [creatorId], references: [id])
  participants    User[]   @relation("RoomParticipants")
  maxParticipants Int      @default(10)
  isActive        Boolean  @default(true)
  price           Int? // price in cents, null for free rooms
  isPaid          Boolean  @default(false)
  mode            RoomMode @default(BOTH)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  callSessions CallSession[]
  messages     Message[]
}

enum RoomType {
  PUBLIC
  PRIVATE
}

enum RoomMode {
  CHAT
  VIDEO
  BOTH
}

model Message {
  id        String        @id @default(cuid())
  roomId    String
  room      Room          @relation(fields: [roomId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  type      MessageType   @default(TEXT)
  content   String? // for plain text messages
  mediaUrl  String? // file/image/audio/video URL
  mediaType MediaType? // what kind of media was uploaded
  createdAt DateTime      @default(now())
  readBy    MessageRead[] // Track who has read this message

  @@index([roomId, createdAt]) // Optimize queries by room and time
}

// New table to track read receipts per user
model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@unique([messageId, userId]) // Each user can only read a message once
  @@index([userId, readAt]) // Optimize queries for user's read messages
}

enum MessageType {
  TEXT
  MEDIA
  VOICE
  SYSTEM
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  FILE
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan @default(BASIC)
  expiresAt DateTime
  createdAt DateTime         @default(now())
}

enum SubscriptionPlan {
  BASIC
  PRO
  VIP
}

model CallSession {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  duration  Int // in seconds
  cost      Int? // in cents
  createdAt DateTime @default(now())
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Int // in cents
  type        TxType
  description String?
  createdAt   DateTime @default(now())
}

enum TxType {
  CREDIT_PURCHASE
  ROOM_ACCESS
  SUBSCRIPTION
  OTHER
}
